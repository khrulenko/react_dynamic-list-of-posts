{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","api/posts.js","index.js"],"names":["PostsList","posts","selectedUser","selectedPost","setSelectedPost","isOpen","setIsOpen","setAreCommentsHidden","className","map","post","userId","key","id","title","type","onClick","state","BASE_URL","request","url","options","method","fetch","then","promise","json","result","data","NewCommentForm","postId","postComments","setPostComments","useState","name","setName","email","setEmail","body","setBody","createComment","trim","headers","JSON","stringify","createPostComments","newComment","onSubmit","event","preventDefault","value","placeholder","onChange","target","PostDetails","areCommentsHidden","loadPostComments","allComments","filter","com","useEffect","length","comment","commentId","App","setPosts","setSelectedUser","allPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9565b667.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  selectedUser,\n  selectedPost,\n  setSelectedPost,\n  isOpen,\n  setIsOpen,\n  setAreCommentsHidden,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map((post) => {\n        if (\n          selectedUser === '0'\n            || +selectedUser === post.userId\n        ) {\n          return (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>\n                  [User #\n                  {post.userId}\n                  ]:\n                  {' '}\n                </b>\n                {post.title}\n              </div>\n\n              <button\n                type=\"button\"\n                className={`PostsList__button button ${\n                  (isOpen && +selectedPost.id === post.id)\n                    ? 'PostsList__close-button'\n                    : ''\n                }`}\n\n                onClick={() => {\n                  if (selectedPost.id !== post.id) {\n                    setSelectedPost(post);\n                    setIsOpen(true);\n                    setAreCommentsHidden(true);\n                  } else {\n                    setIsOpen(state => !state);\n                  }\n                }}\n              >\n                {(isOpen && +selectedPost.id === post.id) ? `Close` : `Open`}\n              </button>\n            </li>\n          );\n        }\n\n        return (<></>);\n      })}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      userId: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedUser: PropTypes.string.isRequired,\n  selectedPost: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    userId: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  setIsOpen: PropTypes.func.isRequired,\n  setAreCommentsHidden: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport function request(url, options = { method: 'GET' }) {\n  return fetch(`${BASE_URL}/${url}`, options)\n    .then(promise => promise.json())\n    .then(result => result.data);\n}\n\nexport function getPostComments() {\n  return request('comments');\n}\n\nexport function createPostComments(postId, name, email, body) {\n  return request(`comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n\nexport function removeComment(commentId) {\n  return request(`comments/${commentId}`, { method: 'DELETE' });\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPostComments } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({\n  postId,\n  postComments,\n  setPostComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  function createComment() {\n    if (name.trim() && email.trim() && body.trim()) {\n      createPostComments(postId, name, email, body)\n        .then((newComment) => {\n          setPostComments([...postComments, newComment]);\n        });\n    }\n\n    setName('');\n    setEmail('');\n    setBody('');\n  }\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        createComment(postId, name, email, body);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.string.isRequired,\n  postComments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setPostComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostComments, removeComment } from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({\n  selectedPost,\n  areCommentsHidden,\n  setAreCommentsHidden,\n}) => {\n  const [postComments, setPostComments] = useState([]);\n\n  function loadPostComments() {\n    getPostComments().then((allComments) => {\n      setPostComments(\n        allComments.filter(com => com.postId === selectedPost.id),\n      );\n    });\n  }\n\n  useEffect(() => {\n    loadPostComments();\n  }, [selectedPost]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.title}</p>\n      </section>\n\n      {(postComments.length === 0)\n        ? (\n          <p\n            className=\"PostDetails__preloadText\"\n          >\n            There are no comments yet. But you can add some:\n          </p>\n        )\n        : (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button PostDetails__hide-show-button\"\n              onClick={() => setAreCommentsHidden(state => !state)}\n            >\n              {`${areCommentsHidden ? 'Hide' : 'Show'} ${postComments.length}`}\n              {' '}\n              comment\n              {\n                postComments.length > 1 ? 's' : ''\n              }\n            </button>\n\n            {areCommentsHidden && (\n              <ul className=\"PostDetails__list\">\n                {postComments.map(comment => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        removeComment(comment.id)\n                          .then((data) => {\n                            loadPostComments();\n                          });\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>\n                      <strong>\n                        {comment.name}\n                        :\n                      </strong>\n                      {comment.body}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPost.id}\n            postComments={postComments}\n            setPostComments={setPostComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPost: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    userId: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  areCommentsHidden: PropTypes.bool.isRequired,\n  setAreCommentsHidden: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [selectedPost, setSelectedPost] = useState({});\n  const [isOpen, setIsOpen] = useState(false);\n  const [areCommentsHidden, setAreCommentsHidden] = useState(true);\n\n  useEffect(() => {\n    getAllPosts().then((allPosts) => {\n      setPosts(allPosts);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setSelectedUser(event.target.value);\n              setIsOpen(false);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedUser={selectedUser}\n            selectedPost={selectedPost}\n            setSelectedPost={setSelectedPost}\n            isOpen={isOpen}\n            setIsOpen={setIsOpen}\n            setAreCommentsHidden={setAreCommentsHidden}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {isOpen ? (\n            <PostDetails\n              selectedPost={selectedPost}\n              areCommentsHidden={areCommentsHidden}\n              setAreCommentsHidden={setAreCommentsHidden}\n            />\n          ) : `here will be selected post`}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL } from './api';\n\nexport function getAllPosts() {\n  return fetch(`${BASE_URL}/posts/`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
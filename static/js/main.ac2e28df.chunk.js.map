{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","api/posts.js","index.js"],"names":["PostsList","posts","selectedUser","selectedPost","setSelectedPost","isOpen","setIsOpen","setAreCommentsHidden","useState","postsToShow","setPostsToShow","useEffect","filter","post","userId","console","log","className","map","key","id","title","type","onClick","selectedPostId","postId","state","openClose","BASE_URL","request","url","options","method","fetch","then","promise","json","result","data","NewCommentForm","postComments","setPostComments","name","setName","email","setEmail","body","setBody","createComment","trim","headers","JSON","stringify","createPostComments","newComment","onSubmit","event","preventDefault","value","required","placeholder","onChange","target","PostDetails","areCommentsHidden","loadPostComments","useCallback","allComments","com","length","comment","commentId","App","setPosts","setSelectedUser","allPosts","ReactDOM","render","document","getElementById"],"mappings":"sUAKaA,G,kBAAY,SAAC,GAQnB,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,aACAC,EAKI,EALJA,aACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,UACAC,EACI,EADJA,qBACI,EACkCC,mBAASP,GAD3C,mBACGQ,EADH,KACgBC,EADhB,KAqBJ,OAlBAC,qBAAU,WACRD,EAAeT,EAAMW,QACnB,SAAAC,GAAI,MAAqB,MAAjBX,IAAyBA,IAAiBW,EAAKC,aAExD,CAACZ,EAAcD,IAYlBc,QAAQC,IAAIb,GAGV,yBAAKc,UAAU,aACb,sCAEA,wBAAIA,UAAU,mBACXR,EAAYS,KAAI,SAACL,GAAD,OACf,wBACEI,UAAU,kBACVE,IAAKN,EAAKO,IAEV,6BACE,yBAAKH,UAAU,4BAAf,UAEGJ,EAAKC,OAFR,MAKC,IACAD,EAAKQ,OAGR,4BACEC,KAAK,SACLL,UAAS,mCACNZ,IAAWF,EAAaiB,KAAOP,EAAKO,GACjC,0BACA,IAGNG,QAAS,kBAxCrB,SAAmBV,EAAMW,EAAgBC,GACnCD,IAAmBC,GACrBrB,EAAgBS,GAChBP,GAAU,GACVC,GAAqB,IAErBD,GAAU,SAAAoB,GAAK,OAAKA,KAkCGC,CAAUd,EAAMV,EAAaiB,GAAIP,EAAKO,MAEnDf,IAAWF,EAAaiB,KAAOP,EAAKO,GAArC,wB,OChEFQ,EAAW,iCCEjB,SAASC,EAAQC,GAAmC,IAA9BC,EAA6B,uDAAnB,CAAEC,OAAQ,OAC/C,OAAOC,MAAM,GAAD,OAAIL,EAAJ,YAAgBE,GAAOC,GAChCG,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,Q,UCCdC,EAAiB,SAAC,GAIxB,IAHLd,EAGI,EAHJA,OACAe,EAEI,EAFJA,aACAC,EACI,EADJA,gBACI,EACoBjC,mBAAS,IAD7B,mBACGkC,EADH,KACSC,EADT,OAEsBnC,mBAAS,IAF/B,mBAEGoC,EAFH,KAEUC,EAFV,OAGoBrC,mBAAS,IAH7B,mBAGGsC,EAHH,KAGSC,EAHT,KAKJ,SAASC,IACHN,EAAKO,QAAUL,EAAMK,QAAUH,EAAKG,QDJrC,SAA4BxB,EAAQiB,EAAME,EAAOE,GACtD,OAAOjB,EAAQ,WAAY,CACzBG,OAAQ,OACRkB,QAAS,CACP,eAAgB,mCAElBJ,KAAMK,KAAKC,UAAU,CACnB3B,SACAiB,OACAE,QACAE,WCLAO,CAAmB5B,EAAQiB,EAAME,EAAOE,GACrCZ,MAAK,SAACoB,GACLb,EAAgB,GAAD,mBAAKD,GAAL,CAAmBc,QAIxCX,EAAQ,IACRE,EAAS,IACTE,EAAQ,IAGV,OACE,0BACE9B,UAAU,iBACVsC,SAAU,SAACC,GACTA,EAAMC,iBACNT,MAGF,yBAAK/B,UAAU,cACb,2BACEK,KAAK,OACLoB,KAAK,OACLgB,MAAOhB,EACPiB,UAAQ,EACRC,YAAY,YACZ3C,UAAU,wBACV4C,SAAU,SAAAL,GAAK,OAAIb,EAAQa,EAAMM,OAAOJ,WAI5C,yBAAKzC,UAAU,cACb,2BACEK,KAAK,OACLoB,KAAK,QACLgB,MAAOd,EACPe,UAAQ,EACRC,YAAY,aACZ3C,UAAU,wBACV4C,SAAU,SAAAL,GAAK,OAAIX,EAASW,EAAMM,OAAOJ,WAI7C,yBAAKzC,UAAU,cACb,8BACEyB,KAAK,OACLgB,MAAOZ,EACPa,UAAQ,EACRC,YAAY,oBACZ3C,UAAU,wBACV4C,SAAU,SAAAL,GAAK,OAAIT,EAAQS,EAAMM,OAAOJ,WAI5C,4BACEpC,KAAK,SACLL,UAAU,wCAFZ,mBC/DO8C,G,MAAc,SAAC,GAIrB,IAHL5D,EAGI,EAHJA,aACA6D,EAEI,EAFJA,kBACAzD,EACI,EADJA,qBACI,EACoCC,mBAAS,IAD7C,mBACGgC,EADH,KACiBC,EADjB,KAGEwB,EAAmBC,uBAAY,WFN9BrC,EAAQ,YEOKK,MAAK,SAACiC,GACtB1B,EACE0B,EAAYvD,QAAO,SAAAwD,GAAG,OAAIA,EAAI3C,SAAWtB,EAAaiB,YAGzD,CAACjB,IAMJ,OAJAQ,qBAAU,WACRsD,MACC,CAAC9D,IAGF,yBAAKc,UAAU,eACb,6CAEA,6BAASA,UAAU,qBACjB,2BAAId,EAAakB,QAGO,IAAxBmB,EAAa6B,OAEX,uBACEpD,UAAU,4BADZ,oDAOA,6BAASA,UAAU,yBACjB,4BACEK,KAAK,SACLL,UAAU,uCACVM,QAAS,kBAAMhB,GAAqB,SAAAmB,GAAK,OAAKA,OAHhD,UAKMsC,EAAoB,OAAS,OALnC,YAK6CxB,EAAa6B,QACvD,IANH,UASI7B,EAAa6B,OAAS,EAAI,IAAM,IAInCL,GACC,wBAAI/C,UAAU,qBACXuB,EAAatB,KAAI,SAAAoD,GAAO,OACvB,wBACErD,UAAU,yBACVE,IAAKmD,EAAQlD,IAEb,4BACEE,KAAK,SACLL,UAAU,oCACVM,QAAS,WFzCxB,IAAuBgD,KE0CQD,EAAQlD,GFzCrCS,EAAQ,YAAD,OAAa0C,GAAa,CAAEvC,OAAQ,YE0CzBE,MAAK,SAACI,GACL2B,SANR,KAYA,2BACE,gCACGK,EAAQ5B,KADX,KAIC4B,EAAQxB,YASzB,iCACE,yBAAK7B,UAAU,6BACb,kBAAC,EAAD,CACEQ,OAAQtB,EAAaiB,GACrBoB,aAAcA,EACdC,gBAAiBA,SCxF7B,IAoEe+B,EApEH,WAAO,IAAD,EACUhE,mBAAS,IADnB,mBACTP,EADS,KACFwE,EADE,OAEwBjE,mBAAS,KAFjC,mBAETN,EAFS,KAEKwE,EAFL,OAGwBlE,mBAAS,IAHjC,mBAGTL,EAHS,KAGKC,EAHL,OAIYI,oBAAS,GAJrB,mBAITH,EAJS,KAIDC,EAJC,OAKkCE,oBAAS,GAL3C,mBAKTwD,EALS,KAKUzD,EALV,KAahB,OANAI,qBAAU,WCZHsB,MAAM,GAAD,OAAIL,EAAJ,YACTM,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,QDWTJ,MAAK,SAACyC,GAClBF,EAASE,QAEV,IAGD,yBAAK1D,UAAU,OACb,4BAAQA,UAAU,eAChB,qDAGE,4BACEA,UAAU,qBACV4C,SAAU,SAACL,GACTkB,EAAgBlB,EAAMM,OAAOJ,OAC7BpD,GAAU,KAGZ,4BAAQoD,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,iBACA,4BAAQA,MAAM,KAAd,gBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,wBACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,KAAd,4BACA,4BAAQA,MAAM,KAAd,mBACA,4BAAQA,MAAM,MAAd,oBAKN,0BAAMzC,UAAU,aACd,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEhB,MAAOA,EACPC,aAAcA,EACdC,aAAcA,EACdC,gBAAiBA,EACjBC,OAAQA,EACRC,UAAWA,EACXC,qBAAsBA,KAI1B,yBAAKU,UAAU,gBACZZ,EACC,kBAAC,EAAD,CACEF,aAAcA,EACd6D,kBAAmBA,EACnBzD,qBAAsBA,IAJnB,iCE1DjBqE,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.ac2e28df.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  posts,\n  selectedUser,\n  selectedPost,\n  setSelectedPost,\n  isOpen,\n  setIsOpen,\n  setAreCommentsHidden,\n}) => {\n  const [postsToShow, setPostsToShow] = useState(posts);\n\n  useEffect(() => {\n    setPostsToShow(posts.filter(\n      post => selectedUser === '0' || +selectedUser === post.userId\n    ));\n  }, [selectedUser, posts]);\n\n  function openClose(post, selectedPostId, postId) {\n    if (selectedPostId !== postId) {\n      setSelectedPost(post);\n      setIsOpen(true);\n      setAreCommentsHidden(true);\n    } else {\n      setIsOpen(state => !state);\n    }\n  }\n\n  console.log(selectedPost);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {postsToShow.map((post) => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div >\n              <div className='PostsList__username-text'>\n                [User #\n                {post.userId}\n                ]:\n              </div>\n              {' '}\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className={`PostsList__button button ${\n                (isOpen && +selectedPost.id === post.id)\n                  ? 'PostsList__close-button'\n                  : ''\n              }`}\n\n              onClick={() => openClose(post, selectedPost.id, post.id)}\n            >\n              {(isOpen && +selectedPost.id === post.id) ? `Close` : `Open`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedUser: PropTypes.string.isRequired,\n  selectedPost: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  setSelectedPost: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  setIsOpen: PropTypes.func.isRequired,\n  setAreCommentsHidden: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport function request(url, options = { method: 'GET' }) {\n  return fetch(`${BASE_URL}/${url}`, options)\n    .then(promise => promise.json())\n    .then(result => result.data);\n}\n\nexport function getPostComments() {\n  return request('comments');\n}\n\nexport function createPostComments(postId, name, email, body) {\n  return request(`comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n\nexport function removeComment(commentId) {\n  return request(`comments/${commentId}`, { method: 'DELETE' });\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPostComments } from '../../api/comments';\n\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({\n  postId,\n  postComments,\n  setPostComments,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  function createComment() {\n    if (name.trim() && email.trim() && body.trim()) {\n      createPostComments(postId, name, email, body)\n        .then((newComment) => {\n          setPostComments([...postComments, newComment]);\n        });\n    }\n\n    setName('');\n    setEmail('');\n    setBody('');\n  }\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        createComment(postId, name, email, body);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          required\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          required\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          required\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.string.isRequired,\n  postComments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  setPostComments: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostComments, removeComment } from '../../api/comments';\n\nimport './PostDetails.scss';\n\nexport const PostDetails = ({\n  selectedPost,\n  areCommentsHidden,\n  setAreCommentsHidden,\n}) => {\n  const [postComments, setPostComments] = useState([]);\n\n  const loadPostComments = useCallback(() => {\n    getPostComments().then((allComments) => {\n      setPostComments(\n        allComments.filter(com => com.postId === selectedPost.id),\n      );\n    });\n  }, [selectedPost]);\n\n  useEffect(() => {\n    loadPostComments();\n  }, [selectedPost]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost.title}</p>\n      </section>\n\n      {(postComments.length === 0)\n        ? (\n          <p\n            className=\"PostDetails__preloadText\"\n          >\n            There are no comments yet. But you can add some:\n          </p>\n        )\n        : (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button PostDetails__hide-show-button\"\n              onClick={() => setAreCommentsHidden(state => !state)}\n            >\n              {`${areCommentsHidden ? 'Hide' : 'Show'} ${postComments.length}`}\n              {' '}\n              comment\n              {\n                postComments.length > 1 ? 's' : ''\n              }\n            </button>\n\n            {areCommentsHidden && (\n              <ul className=\"PostDetails__list\">\n                {postComments.map(comment => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        removeComment(comment.id)\n                          .then((data) => {\n                            loadPostComments();\n                          });\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>\n                      <strong>\n                        {comment.name}\n                        :\n                      </strong>\n                      {comment.body}\n                    </p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={selectedPost.id}\n            postComments={postComments}\n            setPostComments={setPostComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPost: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    userId: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  areCommentsHidden: PropTypes.bool.isRequired,\n  setAreCommentsHidden: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [selectedPost, setSelectedPost] = useState({});\n  const [isOpen, setIsOpen] = useState(false);\n  const [areCommentsHidden, setAreCommentsHidden] = useState(true);\n\n  useEffect(() => {\n    getAllPosts().then((allPosts) => {\n      setPosts(allPosts);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={(event) => {\n              setSelectedUser(event.target.value);\n              setIsOpen(false);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedUser={selectedUser}\n            selectedPost={selectedPost}\n            setSelectedPost={setSelectedPost}\n            isOpen={isOpen}\n            setIsOpen={setIsOpen}\n            setAreCommentsHidden={setAreCommentsHidden}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {isOpen ? (\n            <PostDetails\n              selectedPost={selectedPost}\n              areCommentsHidden={areCommentsHidden}\n              setAreCommentsHidden={setAreCommentsHidden}\n            />\n          ) : `here will be selected post`}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { BASE_URL } from './api';\n\nexport function getAllPosts() {\n  return fetch(`${BASE_URL}/posts/`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}